(* Copyright (c) 2019 by the Board of Trustees of the University of Iowa

   Licensed under the Apache License, Version 2.0 (the "License"); you
   may not use this file except in compliance with the License.  You
   may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0 

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
   implied. See the License for the specific language governing
   permissions and limitations under the License. 

*)

(** Convert a NuXmv Modules to a transition system

    {1 Translation}

    Each Nuxmv Module is translated by creating the variables for 
    the internal system by looking through all the define variables
    and setting their type for the transition system.

    Next, the state variables are generated into maps for next 
    and current state vars to be referenced during the rest of the
    translation of the expressions.

    Before doing the final translation of determing the init and trans
    expressions as well as the properties. All the assign constraints
    are reinterpreted to their corresponding expression by attaching
    the inclusion operator on them.

    Finally, the expressions are generated by using the internal 
    representation of the corresponding Nuxmv expressions. The only
    non-straight forward process that is done is that for any set 
    expressions we change them to a uf_symbol that then at the end 
    we verify at all times for each expression. 

    Once init and trans expressions are generated as well as the 
    properties we are able to assign them all to the transition
    system inputs to call the {!TransSys.mk_trans_sys} method.
    
    @author Andrew West *)

val trans_sys_of_nuxmv : 
    ?preserve_sig:bool ->
    ?slice_nodes:bool -> 
    (NuxmvAst.t * NuxmvChecker.env)  SubSystem.t -> Analysis.param ->
    TransSys.t * (NuxmvAst.t * NuxmvChecker.env) SubSystem.t